fileTypes: [
  "tmpl"
  "inc"
]
name: "HTML Templates"
injections:
  'L:text.html.tmpl - (meta.tag.block.any.tmpl | comment.block.tmpl)':
    patterns: [
      {
        begin: '(<)(TMPL_COMMENT)(>)'
        beginCaptures:
          0:
            name: 'punctuation.definition.comment.begin.tmpl'
        end: '(</)(TMPL_COMMENT)(>)'
        endCaptures:
          0:
            name: 'punctuation.definition.comment.end.tmpl'
        name: 'comment.block.tmpl'
      }
      {
        include: "#tmpl-tags"
      }
    ]
patterns: [
  {
    include: '#line_comment'
  }
  {
    include: "text.html.basic"
  }
]
repository:
  "expression-perl-method":
    match: "\\b[a-zA-Z0-9-_]+(?=\\(.*\\))"
    name: "entity.name.function.perl.expression.tmpl"
  'line_comment':
    'patterns': [
      {
        'begin': '(^[ \\t]+)?(?=#)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.perl'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '^#'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.perl'
            'end': '\\n'
            'name': 'comment.line.single-hash.tmpl'
          }
          {
            'begin': '##'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.perl'
            'end': '\\n'
            'name': 'comment.line.double-hash.tmpl'
          }
        ]
      }
    ]
    name: 'comment.line.tmpl'
  number:
    match: "\\s+\\d"
    name: "constant.numeric"
  "string-double-quoted":
    begin: "\""
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.tmpl"
    end: "\""
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.tmpl"
    name: "string.quoted.double.html"
  "string-single-quoted":
    begin: "'"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.tmpl"
    end: "'"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.tmpl"
    name: "string.quoted.single.html"
  "tag-perl-expression":
    begin: "\\[%"
    beginCaptures:
      "0":
        name: "keyword.perl.expression.start.tmpl"
    end: "%\\]"
    endCaptures:
      "0":
        name: "keyword.perl.expression.end.tmpl"
    patterns: [
      {
        include: "#perl-variable"
      }
      {
        include: "#perl-bareword"
      }
      {
        include: "#perl-keyword"
      }
      {
        include: "#expression-perl-method"
      }
      {
        include: "#string-double-quoted"
      }
      {
        include: "#string-single-quoted"
      }
      {
        include: "#numbers"
      }
    ]
  "perl-bareword":
    match: '(?<={)\\s*\\w+\\s*(?=})'
    name: 'constant.other.bareword.perl'
  "perl-keyword":
    match: "(\\s+(eq|ne|or|and|not)|->|=~|&&|==|\\|\\||!~|<=?|[^-]>=?)"
    name: "keyword.operator.tmpl"
  "tag-perl-options":
    match: "\\b([A-Z_]{1,})"
    name: "entity.other.attribute-name.html"
  "tmpl-tag-stuff":
    patterns: [
      {
        include: "#tag-perl-attribute"
      }
      {
        include: "#string-single-quoted"
      }
      {
        include: "#string-double-quoted"
      }
      {
        include: "#tag-perl-options"
      }
      {
        include: "#tag-perl-expression"
      }
    ]
  "tmpl-tags":
    begin: "(<[/~]?)(TMPL_(?i:[a-zA-Z_]+)\\b)"
    beginCaptures:
      "1":
        name: "entity.name.tag.begin.tmpl"
      "2":
        name: "support.type.tmpl"
    end: "([~]?>)"
    endCaptures:
      "1":
        name: "entity.name.tag.end.tmpl"
    name: "meta.tag.block.any.tmpl"
    patterns: [
      {
        include: "#tmpl-tag-stuff"
      }
    ]
  'numbers':
    'patterns': [
      {
        'match': '\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b'
        'name': 'constant.numeric.tmpl'
      }
    ]
  'perl-variable':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.perl'
        'match': '(\\$)&(?![A-Za-z0-9_])'
        'name': 'variable.other.regexp.match.perl'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.perl'
        'match': '(\\$)`(?![A-Za-z0-9_])'
        'name': 'variable.other.regexp.pre-match.perl'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.perl'
        'match': '(\\$)\'(?![A-Za-z0-9_])'
        'name': 'variable.other.regexp.post-match.perl'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.perl'
        'match': '(\\$)\\+(?![A-Za-z0-9_])'
        'name': 'variable.other.regexp.last-paren-match.perl'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.perl'
        'match': '(\\$)"(?![A-Za-z0-9_])'
        'name': 'variable.other.readwrite.list-separator.perl'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.perl'
        'match': '(\\$)0(?![A-Za-z0-9_])'
        'name': 'variable.other.predefined.program-name.perl'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.perl'
        'match': '(\\$)[_ab\\*\\.\\/\\|,\\\\;#%=\\-~^:?!\\$<>\\(\\)\\[\\]@](?![A-Za-z0-9_])'
        'name': 'variable.other.predefined.perl'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.perl'
        'match': '(\\$)[0-9]+(?![A-Za-z0-9_])'
        'name': 'variable.other.subpattern.perl'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.perl'
        'match': '([\\$\\@\\%](#)?)([a-zA-Zx7f-xff\\$]|::)([a-zA-Z0-9_x7f-xff\\$]|::)*\\b'
        'name': 'variable.other.readwrite.global.perl'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.perl'
          '2':
            'name': 'punctuation.definition.variable.perl'
        'match': '(\\$\\{)(?:[a-zA-Zx7f-xff\\$]|::)(?:[a-zA-Z0-9_x7f-xff\\$]|::)*(\\})'
        'name': 'variable.other.readwrite.global.perl'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.perl'
        'match': '([\\$\\@\\%](#)?)[0-9_]\\b'
        'name': 'variable.other.readwrite.global.special.perl'
      }
    ]
scopeName: "text.html.tmpl"
